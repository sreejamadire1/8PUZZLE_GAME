#include <stdio.h>
#include<bits/stdc++.h>
using namespace std;

struct Node{
    Node* parent;
    vector<vector<int>>mat;
    int x,y;
    int cost;
    int level;
};
struct comp{
    bool operator()(const Node* lhs,const Node* rhs)const
    {
               return (lhs->cost + lhs->level) > (rhs->cost + rhs->level); 
    }
    
};
Node* newNode(vector<vector<int>>mat,int x,int y,int newx,int newy,int level,Node* parent){
    Node* node= new Node;
    node->parent=parent;
    node->mat=mat;
    swap(node->mat[x][y],node->mat[newx][newy]);
    node->cost=INT_MAX;
    node->level=level;
    node->x=newx;
    node->y=newy;
    return node;
}
int calculateCost(vector<vector<int>>ini,vector<vector<int>>f,int i_s){
    int c=0;
    for(int i=0;i<i_s;i++){
        for(int j=0;j<i_s;j++){
            if(ini[i][j] && ini[i][j]!=f[i][j])
            c++;
        }
    }
    return c;
}
void printMatrix(vector<vector<int>>mat,int i_s){
    for(int i=0;i<i_s;i++){
        for(int j=0;j<i_s;j++)
            cout<<mat[i][j]<<" ";
            cout<<endl;
        
    }
}
void printPath(Node* root,int i_s){
    if(root==NULL)return;
    printPath(root->parent,i_s);
    printMatrix(root->mat,i_s);
    cout<<endl;
}
int row[] = { 1, 0, -1, 0 }; 
int col[] = { 0, -1, 0, 1 }; 
int isSafe(int x,int y,int n){
    return (x>=0 && x<n && y>=0 && y<n);
}
void solve(vector<vector<int>>i,int x,int y,vector<vector<int>>f,int i_s){
    int min_cost=INT_MAX;
    priority_queue<Node*,vector<Node*>,comp>pq;
    Node* root=newNode(i,x,y,x,y,0,NULL);
    root->cost=calculateCost(i,f,i_s);
    min_cost=root->cost;
    pq.push(root);
    while(!pq.empty()){
        Node* min=pq.top();
        ///condition for the case in which goal state cannot be reached 
        if(min->cost > min_cost){
            cout<<"cannot reach goal state from initial state"<<endl;
            return ;
        }
        if(min->cost < min_cost)
        min_cost=min->cost;
        pq.pop();
        if(min->cost == 0){
            printPath(min,i_s);
            return;
        }
        for(int i=0;i<4;i++){
            if(isSafe(min->x+row[i],min->y+col[i],i_s)){
               Node* child=newNode(min->mat,min->x,min->y,min->x+row[i],min->y+col[i],min->level+1,min);
                child->cost=calculateCost(child->mat,f,i_s);
                pq.push(child);
          }
        }
    }
}

int main()
{
    int is;cin>>is;
    int x,y;
    vector<vector<int>>vec( is , vector<int> (is));
    for(int l=0;l<is;l++){
        for(int m=0;m<is;m++)
        {
            cin>>vec[l][m];
         if(vec[l][m]==0)
         {
               x=l;
               y=m;

         }
        }
    }
    vector<vector<int>>f( is , vector<int> (is));
    
        for(int l=0;l<is;l++){
          for(int m=0;m<is;m++)
          {
            cin>>f[l][m];

           }
        }

   solve(vec,x,y,f,is);
      
}
